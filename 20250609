import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
from pptx import Presentation
from pptx.util import Inches, Pt
from datetime import datetime
import google.generativeai as genai

# --- 設定 ---
st.set_page_config(page_title="CSV分析とPPT自動生成", layout="wide")
st.title("CSVデータ分析 & Gemini示唆 & PowerPoint出力")

# --- ファイルパス指定（ローカルの固定CSVファイルを使用） ---
CSV_PATH = "C:\\Users\\shomatsubara\\Documents\\Python_project\\AI研修_諸データ_clean.csv"

# --- Gemini APIキーの取得 ---
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    st.error("環境変数 'GOOGLE_API_KEY' が設定されていません。PowerShell または .env で設定してください。")
    st.stop()

# --- データ読み込み ---
st.subheader("① データの読み込みと確認")
try:
    df = pd.read_csv(CSV_PATH, encoding="utf-8")
    df.columns = df.columns.str.strip()

    if "timeCd" not in df.columns or "value" not in df.columns:
        st.error("CSVファイルに 'timeCd' と 'value' の列が必要です。")
        st.stop()

    df['timeCd'] = df['timeCd'].astype(str)
    df['Date'] = pd.to_datetime(df['timeCd'].str[:6], format='%Y%m', errors='coerce')
    df = df.dropna(subset=['Date'])
    df = df.rename(columns={'value': 'Value'})

    st.dataframe(df.head())
except Exception as e:
    st.error(f"CSV 読み込み失敗: {e}")
    st.stop()

# --- グラフ描画 ---
st.subheader("② 経済トレンドの可視化")
fig, ax = plt.subplots(figsize=(10, 4))
graph_title = "Transition of economic trend"
ax.plot(df['Date'], df['Value'], marker='o')
ax.set_title(graph_title)
ax.set_xlabel("Date")
ax.set_ylabel("Value")
ax.grid(True)
st.pyplot(fig)

# --- Gemini API による示唆の生成 ---
st.subheader("③ Gemini による示唆の生成")
genai.configure(api_key=api_key)
model = genai.GenerativeModel("gemini-2.5-flash-preview-04-17")

# ✅ 時系列順・重要列のみ・最大100行に整形
csv_data_for_prompt = (
    df.sort_values("Date")[["Date", "Value"]]
    .tail(100)  # 必要に応じて .head(100) や .sample(50) に変更可能
    .to_string(index=False)
)

# ✅ プロンプトにテキストとして埋め込む
prompt = (
    f"グラフタイトル: {graph_title}\n\n"
    "以下は時系列の経済データです。\n"
    "このデータに基づいて、\n"
    "1. 注目すべき傾向と理由を\n"
    "を50文字で端的に述べてください。\n\n"
    "【トレンドデータ（Date, Value）】:\n"
    f"{csv_data_for_prompt}"
)

# --- Gemini実行ボタン ---
if st.button("Geminiで示唆を生成"):
    with st.spinner("Geminiが分析中..."):
        try:
            response = model.generate_content(prompt)
            insight = response.text.strip()
            st.success("Geminiからの示唆:")
            st.markdown(insight)

            # --- PowerPoint 作成 ---
            st.subheader("④ PowerPoint 出力")
            prs = Presentation()

            # タイトルスライド（1枚目）
            slide = prs.slides.add_slide(prs.slide_layouts[0])
            slide.shapes.title.text = "経済データ分析レポート"
            slide.placeholders[1].text = "Geminiによる示唆を含む"

            # 統合スライド（2枚目：示唆 + グラフを1枚に縦配置）
            slide = prs.slides.add_slide(prs.slide_layouts[6])  # 空白レイアウト
            
            # 上部にリード文として示唆を配置
            textbox = slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(9), Inches(1.8))
            text_frame = textbox.text_frame
            text_frame.clear()
            
            # リード文として示唆内容を配置
            lead_para = text_frame.add_paragraph()
            lead_para.text = insight
            lead_para.font.size = Pt(18)
            lead_para.font.bold = True
            
            # 下部にグラフを配置
            graph_path = "trend_plot.png"
            fig.savefig(graph_path, dpi=150, bbox_inches='tight')
            slide.shapes.add_picture(graph_path, Inches(0.5), Inches(2.5), width=Inches(9), height=Inches(5))

            # ダウンロードボタン
            pptx_filename = "economic_insight_report.pptx"
            prs.save(pptx_filename)
            with open(pptx_filename, "rb") as f:
                st.download_button(
                    "PowerPointをダウンロード",
                    data=f,
                    file_name=pptx_filename,
                    mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
                )

        except Exception as e:
            st.error(f"Gemini APIエラー: {e}")　
